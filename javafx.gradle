// source: http://ryansblog.jptech.ca/2012/12/javafx-and-gradle.html
import groovy.xml.NamespaceBuilder

assert project.plugins.findPlugin(JavaPlugin):
        "The Java plugin must be applied before using javafx7.gradle."

assert project.plugins.findPlugin(ApplicationPlugin):
        "The Application plugin must be applied before using javafx7.gradle."

def javaHome = System.properties['java.home']

logger.warn("Project '$project.name' is using fx:jar. " +
        "Disabling startScripts, installApp.")

configurations {
    jfxrt
    jfxant

    sourceSets {
        main {
            compileClasspath += configurations.jfxrt
        }
    }
}

dependencies {
    println("dependendcies: ")
    ext.jfxrt_temp="$javaHome" + "/lib/jfxrt.jar"
    jfxrt files(ext.jfxrt_temp)
    println(ext.jfxrt_temp)

    ext.jfxant_temp="$javaHome" + "/../lib/ant-javafx.jar"
    jfxant files(ext.jfxant_temp)
    println(ext.jfxant_temp)


}

run.classpath.add(configurations.jfxrt)

jar {
    //destinationDir=file("$buildDir")
    actions = []

    def appId = project.name
    def fallbackClassName = 'com.javafx.main.NoJavaFXFallback'

    def antfx = NamespaceBuilder.newInstance(
            ant,
            'javafx:com.sun.javafx.tools.ant')


    ant.taskdef(
            resource: 'com/sun/javafx/tools/ant/antlib.xml',
            uri: 'javafx:com.sun.javafx.tools.ant',
            classpath: configurations.jfxant.asPath)



    doLast {
        antfx.application(
                id: appId,
                name: project.name,
                mainClass: mainClassName,
                fallbackClass: fallbackClassName)

        antfx.jar(destfile: archivePath) {
            application(refid: appId)
            fileset(dir: sourceSets.main.output.classesDir)
            fileset(dir: sourceSets.main.output.resourcesDir)
        }
    }
}

startScripts {
    enabled = true
}

installApp {
    enabled = false
}